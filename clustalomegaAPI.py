'''
 David Lennox-Hvenekilde
 A stripped down python requests wrapper for simple queries to the EMBL clustal omega REST API
 https://www.ebi.ac.uk/Tools/common/tools/help/

 The api uses XML headers
'''

import requests
import os

baseUrl = u'https://www.ebi.ac.uk/Tools/services/rest/clustalo'
root = "./endpoints/"

# Requests content helper function ############################
def restRequest(url):
    result = requests.get(url).content
    return result

# Get xml service parameters ###################################
def serviceGetParameters():
    '''
    Get the paramaters available for submitting an MSA job
    '''
    requestUrl = baseUrl + u'/parameters'
    xmlDoc = restRequest(requestUrl)
    return xmlDoc

# Request string needed for alignment job #######################
def fasta_to_request_string(fasta_file, email = "davidlh3@gmail.com", title = False):
    '''
    This function takes a fasta file as input, reading it, and converting
    it to a formatted string which can be used for POSTing a clustal omega MSA request.
    Basically translates spaces, linebreaks, ">", etc. to unicode and concetanates everything.
    '''
    request_string = "email="+ email.replace("@","%40") + "&"
    if title: 
        request_string = request_string + "title=" + title.replace(" ", "%20") + "&"

    request_string = request_string + "sequence="
    with open(fasta_file, "r") as faf:
        fasta_lines = faf.readlines()
        for line in fasta_lines:
            request_string = request_string + line.replace(">","%3E").replace("\n", "%0A")
    
    return request_string


# POST alignment request ######################################
def post_alignment_request(fasta_file, email = "davidlh3@gmail.com", title = False):
    '''
    Posts the request string from the fasta_to_request_string() to Clustal Omega API.
    Returns the job ID of the queried job
    '''
    request_string = fasta_to_request_string(fasta_file, email, title)
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'text/plain'
    }
    response = requests.post(baseUrl+"/run", headers=headers, data=request_string)
    
    # Returns the autogenerated job id:
    return str(response.content)[2:-1]


# GET job status ##############################################
def alignment_job_status(job_id):
    '''
    Input Job id, e.g. via output of post_alignment_request()
    Will return "FINISHED" when job is done
    '''
    response = requests.get(baseUrl+"/status/"+job_id)
    return str(response.content)[2:-1]



# GET results #################################################
def clustalo_alignment(job_id, save_clustalo = True, force = False):
    '''
        Take a job_id as input
        If the job exists and is finished, return the text, and save the
        Clustal Omega alignment file

        request header needs to be modified depending on result type wanted
        See result types https://www.ebi.ac.uk/Tools/common/tools/help/
        The response text file has to reformated slightly
    '''
    file_path = root+job_id+".clustal_num"

    if os.path.isfile(file_path):
        if force:
            os.remove(file_path)
            print("Existing clustal omega file deleted, and remade")
        elif not force:
            print("Clustal omega file already exists")
            with open(file_path, "r") as clustalo_file:
                return clustalo_file.read()

    if alignment_job_status(job_id) != "FINISHED":
        print("Job still running")
        FINISHED = False
        return FINISHED

    # Get response
    headers = {
        'Accept': 'text/x-clustalw-alignment'
    }

    response = requests.get(baseUrl+"/result/"+job_id+"/aln-clustal_num", headers=headers)
    
    # Reformat
    response = str(response.content)[2:-1]
    response = response.replace("\\n","\n").replace("\\t", "\t")

    # Write file
    if save_clustalo:
        with open(file_path, "w") as clustalo_file:
            clustalo_file.write(response)
    
    return response